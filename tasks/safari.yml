---
- block:
  - name: "Safari - General - Opens with"
    osx_defaults: { domain: 'com.apple.safari', key: "{{ item.key }}", type: "{{ item.type }}", value: "{{ item.value }}" }
    with_items: "{{  Safari_OpenWith_Options }}"
    when:
      - Safari_OpensWith is defined
      - (item.name == Safari_OpensWith or item.value == Safari_OpensWith)
    notify: restart Safari

  - name: "Safari - General"
    osx_defaults: { domain: 'com.apple.safari', key: "{{ item.0.key }}", type: "{{ item.0.type }}", value: "{{ item.1.value }}" }
    with_subelements:
      - "{{ Safari_General_Options }}"
      - value
    when: (item.0.key == 'NewWindowBehavior'       and (item.1.name == Safari_NewWindowBehavior       or item.1.value == Safari_NewWindowBehavior)) or
          (item.0.key == 'NewTabBehavior'          and (item.1.name == Safari_NewTabBehavior          or item.1.value == Safari_NewTabBehavior)) or
          (item.0.key == 'HistoryAgeInDaysLimit'   and (item.1.name == Safari_HistoryAgeInDaysLimit   or item.1.value == Safari_HistoryAgeInDaysLimit)) or
          (item.0.key == 'TopSitesGridArrangement' and (item.1.name == Safari_TopSitesGridArrangement or item.1.value == Safari_TopSitesGridArrangement)) or
          (item.0.key == 'DownloadsClearingPolicy' and (item.1.name == Safari_DownloadsClearingPolicy or item.1.value == Safari_DownloadsClearingPolicy)) or
          (item.0.key == 'AutoOpenSafeDownloads'   and (item.1.name == Safari_AutoOpenSafeDownloads   or item.1.value == Safari_AutoOpenSafeDownloads|bool))
    notify: restart Safari

  - name: "Safari - Tabs"
    osx_defaults: { domain: 'com.apple.safari', key: "{{ item.0.key }}", type: "{{ item.0.type }}", value: "{{ item.1.value }}" }
    with_subelements:
      - "{{ Safari_Tabs_Options }}"
      - value
    when: (item.0.key == 'TabCreationPolicy'       and (item.1.name == Safari_TabCreationPolicy       or item.1.value == Safari_TabCreationPolicy)) or
          (item.0.key == 'CommandClickMakesTabs'   and (item.1.name == Safari_CommandClickMakesTabs   or item.1.value == Safari_CommandClickMakesTabs|bool)) or
          (item.0.key == 'OpenNewTabsInFront'      and (item.1.name == Safari_OpenNewTabsInFront      or item.1.value == Safari_OpenNewTabsInFront|bool)) or
          (item.0.key == 'Command1Through9SwitchesTabs' and (item.1.name == Safari_Command1Through9SwitchesTabs or item.1.value == Safari_Command1Through9SwitchesTabs|bool))
    notify: restart Safari

  - name: "Safari - Autofill"
    osx_defaults: { domain: 'com.apple.safari', key: "{{ item.0.key }}", type: "{{ item.0.type }}", value: "{{ item.1.value }}" }
    with_subelements:
      - "{{ Safari_Autofill_Options }}"
      - value
    when: (item.0.key == 'AutoFillFromAddressBook'    and (item.1.name == Safari_AutoFillFromAddressBook    or item.1.value == Safari_AutoFillFromAddressBook|bool)) or
          (item.0.key == 'AutoFillPasswords'          and (item.1.name == Safari_AutoFillPasswords          or item.1.value == Safari_AutoFillPasswords|bool)) or
          (item.0.key == 'AutoFillCreditCardData'     and (item.1.name == Safari_AutoFillCreditCardData     or item.1.value == Safari_AutoFillCreditCardData|bool)) or
          (item.0.key == 'AutoFillMiscellaneousForms' and (item.1.name == Safari_AutoFillMiscellaneousForms or item.1.value == Safari_AutoFillMiscellaneousForms|bool))
    notify: restart Safari


  - name: "Safari - Search - Search Engine"
    osx_defaults: { domain: 'NSGlobalDomain', key: 'NSDefaultDisplayName', type: string, value: "{{ item }}" }
    loop:
      - "{{ Safari_SearchEngine }}"
    when: Safari_SearchEngine is defined
    notify: restart Safari

  - name: "Safari - Search - Search Engine Identifier"
    osx_defaults: { domain: 'NSGlobalDomain', key: 'NSProviderIdentifier', type: string, value: "{{ item.value }}" }
    with_items:
      - { name: Yahoo, value: "com.yahoo.www" }
      - { name: Google, value: "com.google.www" }
      - { name: Bing, value: "com.bing.www" }
      - { name: DuckDuckGo, value: "com.duckduckgo" }
    when: Safari_SearchEngine is defined and item.name == Safari_SearchEngine

  - name: "Safari - Search - Include search engine suggestions"
    osx_defaults: { domain: 'com.apple.safari', key: 'SuppressSearchSuggestions', type: bool, value: "{{ not Safari_IncludeSearchSuggestions }}" }
    when: Safari_IncludeSearchSuggestions is defined
    notify: restart Safari

  #- name: "Safari - Search - Smart Search Field - Include Safari suggestions"

  - name: "Safari - Search - Smart Search Field - Enable Quick Website Search"
    osx_defaults: { domain: 'com.apple.safari', key: 'WebsiteSpecificSearchEnabled', type: bool, value: "{{ Safari_WebsiteSpecificSearchEnabled }}" }
    when: Safari_WebsiteSpecificSearchEnabled is defined
    notify: restart Safari

  - name: "Safari - Search - Smart Search Field - Preload Top Hit in the background"
    osx_defaults: { domain: 'com.apple.safari', key: 'PreloadTopHit', type: bool, value: "{{ Safari_PreloadTopHit }}" }
    when: Safari_PreloadTopHit is defined
    notify: restart Safari

  - name: "Safari - Search - Smart Search Field - Show Favorites"
    osx_defaults: { domain: 'com.apple.safari', key: 'ShowFavoritesUnderSmartSearchField', type: bool, value: "{{ Safari_ShowFavoritesUnderSmartSearchField }}" }
    when: Safari_ShowFavoritesUnderSmartSearchField is defined
    notify: restart Safari




  - fail:
    ignore_errors: false


  - name: "Safari - Security - Fraudulent Sites - Warn when visiting a fraudulent website"
    osx_defaults: { domain: 'com.apple.safari', key: 'WarnAboutFraudulentWebsites', type: bool, value: "{{ Safari_WarnAboutFraudulentWebsites }}" }
    when: Safari_WarnAboutFraudulentWebsites is defined
    notify: restart Safari

  - name: "Safari - Security - Web Content - Enable Javascript"
    osx_defaults: { domain: 'com.apple.safari', key: 'com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptEnabled', type: bool, value: "{{ Safari_JavaScriptEnabled }}" }
    when: Safari_JavaScriptEnabled is defined
    notify: restart Safari

  - name: "Safari - Security - Web Content - Block pop-up windows"
    osx_defaults: { domain: 'com.apple.safari', key: 'com.apple.Safari.ContentPageGroupIdentifier.WebKit2JavaScriptCanOpenWindowsAutomatically', type: bool, value: "{{ not Safari_BlockPopupWindows }}" }
    when: Safari_BlockPopupWindows is defined
    notify: restart Safari

  - name: "Safari - Security - Web Content - Allow WebGL"
    osx_defaults: { domain: 'com.apple.safari', key: 'com.apple.Safari.ContentPageGroupIdentifier.WebKit2WebGLEnabled', type: bool, value: "{{ Safari_AllowWebGL }}" }
    when: Safari_AllowWebGL is defined
    notify: restart Safari

  - name: "Safari - Security - Internet plug-ins - Allow Plug-ins"
    osx_defaults: { domain: 'com.apple.safari', key: 'com.apple.Safari.ContentPageGroupIdentifier.WebKit2PluginsEnabled', type: bool, value: "{{ Safari_AllowPlugins }}" }
    when: Safari_AllowPlugins is defined
    notify: restart Safari

  - name: "Safari - Privacy - Cookies and website data"
    osx_defaults: { domain: 'com.apple.safari', key: "{{ item.key }}", type: int, value: "{{ item.value }}" }
    with_items:
      - { name: "Always block", key: "BlockStoragePolicy", value: 0 }
      - { name: "Always block", key: "WebKitStorageBlockingPolicy", value: 2 }
      - { name: "Always block", key: "com.apple.Safari.ContentPageGroupIdentifier.WebKit2StorageBlockingPolicy", value: 2 }
      - { name: "Always from current website only", key: "BlockStoragePolicy", value: 3 }
      - { name: "Always from current website only", key: "WebKitStorageBlockingPolicy", value: 1 }
      - { name: "Always from current website only", key: "com.apple.Safari.ContentPageGroupIdentifier.WebKit2StorageBlockingPolicy", value: 1 }
      - { name: "Allow from websites I visit", key: "BlockStoragePolicy", value: 2 }
      - { name: "Allow from websites I visit", key: "WebKitStorageBlockingPolicy", value: 1 }
      - { name: "Allow from websites I visit", key: "com.apple.Safari.ContentPageGroupIdentifier.WebKit2StorageBlockingPolicy", value: 1 }
      - { name: "Always allow", key: "BlockStoragePolicy", value: 1 }
      - { name: "Always allow", key: "WebKitStorageBlockingPolicy", value: 0 }
      - { name: "Always allow", key: "com.apple.Safari.ContentPageGroupIdentifier.WebKit2StorageBlockingPolicy", value: 0 }
    when: Safari_Cookies is defined and item.name == Safari_Cookies
    notify: restart Safari

  - name: "Safari - Privacy - Website use of location services"
    osx_defaults: { domain: 'com.apple.safari', key: 'SafariGeolocationPermissionPolicy', type: int, value: "{{ item.value }}" }
    with_items: "{{ Safari_GeolocationPermissionPolicies }}"
    when:
      - Safari_SafariGeolocationPermissionPolicy is defined
      - (item.name == Safari_SafariGeolocationPermissionPolicy or item.value == Safari_SafariGeolocationPermissionPolicy)
    notify: restart Safari

  - name: "Safari - Privacy - Website tracking - Ask websites not to track me"
    osx_defaults: { domain: 'com.apple.safari', key: 'SendDoNotTrackHTTPHeader', type: bool, value: "{{ Safari_SendDoNotTrackHTTPHeader }}" }
    when: Safari_SendDoNotTrackHTTPHeader is defined
    notify: restart Safari

  - name: "Safari - Notification - Allow websites to ask for permission to send push notifications"
    osx_defaults: { domain: 'com.apple.safari', key: 'CanPromptForPushNotifications', type: bool, value: "{{ Safari_CanPromptForPushNotifications }}" }
    when: Safari_CanPromptForPushNotifications is defined
    notify: restart Safari

  - name: "Safari - Exensions - Automatically update extensions from Safari Extensions Gallery"
    osx_defaults: { domain: 'com.apple.safari', key: 'InstallExtensionUpdatesAutomatically', type: bool, value: "{{ Safari_InstallExtensionUpdatesAutomatically }}" }
    when: Safari_InstallExtensionUpdatesAutomatically is defined
    notify: restart Safari

  - name: "Safari - Advanced - Smart Search Field - Show full website address"
    osx_defaults: { domain: 'com.apple.safari', key: 'ShowFullURLInSmartSearchField', type: bool, value: "{{ Safari_ShowFullURLInSmartSearchField }}" }
    when: Safari_ShowFullURLInSmartSearchField is defined
    notify: restart Safari

  - name: "Safari - Advanced - Accessibility - Never use font sizes smaller than"
    osx_defaults: { domain: 'com.apple.safari', key: "{{ item.key }}", type: '{{ item.type }}', value: "{{ Safari_WebKitMinimumFontSize }}" }
    with_items:
      - { key: "WebKitMinimumFontSize", type: "int" }
      - { key: "com.apple.Safari.ContentPageGroupIdentifier.WebKit2MinimumFontSize", type: "float" }
    when: Safari_WebKitMinimumFontSize is defined
    notify: restart Safari

  - name: "Safari - Advanced - Accessibility - Press Tab to highlight ach item on a webpage"
    osx_defaults: { domain: 'com.apple.safari', key: '{{ item }}', type: bool, value: "{{ Safari_WebKitTabToLinksPreferenceKey }}" }
    with_items: [ "WebKitTabToLinksPreferenceKey", "com.apple.Safari.ContentPageGroupIdentifier.WebKit2TabsToLinks" ]
    when: Safari_WebKitTabToLinksPreferenceKey is defined
    notify: restart Safari

  - name: "Safari - Advanced - Bonjour - Include Bonjour in the Bookmarks Menu"
    osx_defaults: { domain: 'com.apple.safari', key: 'BookmarksMenuIncludesRendezvous', type: bool, value: "{{ Safari_BookmarksMenuIncludesRendezvous }}" }
    when: Safari_BookmarksMenuIncludesRendezvous is defined
    notify: restart Safari

  #- name: "Safari - Advanced - Bonjour - Include Bonjour in the Favorites bar

  - name: "Safari - Advanced - Internet plug-ins - Stop plug-ins to saver power"
    osx_defaults: { domain: 'com.apple.safari', key: 'com.apple.Safari.ContentPageGroupIdentifier.WebKit2PlugInSnapshottingEnabled', type: bool, value: "{{ Safari_StopPuginsToSavePower }}" }
    when: Safari_StopPuginsToSavePower is defined
    notify: restart Safari

  #- name: "Safari - Advanced - Style sheet

  #- name: "Safari - Advanced - Default encoding

  #- name: "Safari - Advanced - Proxies

  - name: "Safari - Advanced - Show Develop menu in menu bar"
    osx_defaults: { domain: 'com.apple.safari', key: '{{ item }}', type: bool, value: "{{ Safari_ShowDeloperMenu }}" }
    with_items:
      - "IncludeDevelopMenu"
      - "WebKitDeveloperExtrasEnabledPreferenceKey"
      - "com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled"
    when: Safari_ShowDeloperMenu is defined
    notify: restart Safari

  - name: "Safari - Advanced - Debug Menu"
    osx_defaults: { domain: 'com.apple.safari', key: 'IncludeInternalDebugMenu', type: bool, value: "{{ Safari_DebugMenu }}" }
    when: Safari_DebugMenu is defined
    notify: restart Safari

  - name: "Safari - View - Show Favorites Bar"
    osx_defaults: { domain: 'com.apple.safari', key: 'ShowFavoritesBar-v2', type: bool, value: "{{ Safari_ShowFavoritesBar }}" }
    when: Safari_ShowFavoritesBar is defined
    notify: restart Safari

  - name: "Safari - View - Show Tab Bar"
    osx_defaults: { domain: 'com.apple.safari', key: 'AlwaysShowTabBar', type: bool, value: "{{ Safari_AlwaysShowTabBar }}" }
    when: Safari_AlwaysShowTabBar is defined
    notify: restart Safari

  - name: "Safari - View - Show Status Bar"
    osx_defaults: { domain: 'com.apple.safari', key: 'ShowOverlayStatusBar', type: bool, value: "{{ Safari_ShowOverlayStatusBar }}" }
    when: Safari_ShowOverlayStatusBar is defined
    notify: restart Safari

  - name: "Safari - View - Show Sidebar"
    osx_defaults: { domain: 'com.apple.safari', key: 'ShowSidebarInNewWindows', type: bool, value: "{{ Safari_ShowSidebarInNewWindows }}" }
    when: Safari_ShowSidebarInNewWindows is defined
    notify: restart Safari

  - name: "Safari - View - Show Sidebar Mode"
    osx_defaults: { domain: 'com.apple.safari', key: 'SidebarViewModeIdentifier', type: string, value: "{{ Safari_SidebarViewModeIdentifier }}" }
    when: Safari_SidebarViewModeIdentifier is defined
    notify: restart Safari

  - name: "Safari - Bookmarks - Show Frequently Visited in Favorites"
    osx_defaults: { domain: 'com.apple.safari', key: 'ShowFrequentlyVisitedSites', type: bool, value: "{{ Safari_ShowFrequentlyVisitedSites }}" }
    when: Safari_ShowFrequentlyVisitedSites is defined
    notify: restart Safari
  # Privilege escalation to `target_user_id` is only required for inner steps when
  # the `target_user_id` doesn't match the `ansible_user_id`
  become: "{{ (target_user_id != ansible_user_id) | bool }}"
  become_user: "{{ target_user_id }}"
